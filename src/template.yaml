AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  reminder

  Sample SAM Template for reminder

Parameters:
  Stage:
    Type: String
    Default: v1
  AppLogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - FATAL
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
  DiscordPublicKey:
    Type: String
  DiscordAppId:
    Type: String
  DiscordToken:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: !Ref AppLogLevel
  Api:
    TracingEnabled: true

Resources:
  ReminderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
  ReminderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      Handler: entrypoint.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        Reminder:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref ReminderApi
      Environment:
        Variables:
          DISCORD_PUBLIC_KEY: !Ref DiscordPublicKey
          LAMBDA_FOLLOWUP_FUNCTION: !Ref FollowUpFunction
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref FollowUpFunction
  ReminderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ReminderFunction}
      RetentionInDays: 7

  FollowUpRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: "manage-scheduler-for-followup-function"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "scheduler:ListSchedules"
                  - "scheduler:CreateSchedule"
                  - "scheduler:DeleteSchedule"
                  - "scheduler:GetSchedule"
                  - "scheduler:UpdateSchedule"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt EventBridgeRole.Arn
  FollowUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: followup.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Environment:
        Variables:
          DISCORD_APP_ID: !Ref DiscordAppId
          DISCORD_TOKEN: !Ref DiscordToken
          SCHEDULER_GROUP: !Ref EventBridgeGroup
          SCHEDULER_ROLE: !GetAtt EventBridgeRole.Arn
          LAMBDA_MESSAGE: !GetAtt MessagePostFunction.Arn
      Role: !GetAtt FollowUpRole.Arn
  FollowUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FollowUpFunction}
      RetentionInDays: 7

  MessagePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: message.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Environment:
        Variables:
          DISCORD_TOKEN: !Ref DiscordToken
  MessagePostLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${MessagePostFunction}
      RetentionInDays: 7

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: scheduler.amazonaws.com
      Policies:
        - PolicyName: "for-eventbridge-scheduler"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt MessagePostFunction.Arn

  EventBridgeGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: "roo-discord"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiDeployment:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ReminderApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  ApiFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt ReminderFunction.Arn
  ApiFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt ReminderFunctionRole.Arn
